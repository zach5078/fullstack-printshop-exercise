{"version":3,"sources":["constant.js","User.js","Upload.js","Products.js","App.js","index.js","serviceWorker.js"],"names":["requestUrl","User","useState","loginStatus","setLoginStatus","useEffect","url","fetch","method","headers","body","JSON","stringify","username","password","then","response","json","data","success","catch","error","console","upload","props","Fragment","type","id","onChange","e","productId","file","target","files","log","handleUpload","products","length","map","item","description","userName","img","_id","key","src","alt","App","initialData","className","Boolean","window","location","hostname","match","parse","document","getElementById","innerText","err","ReactDOM","hydrate","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oOACaA,EAEX,gDCAa,SAASC,IAAQ,IAAD,EACSC,mBAAS,WADlB,mBACtBC,EADsB,KACTC,EADS,KA+B7B,OA5BAC,qBAAU,WACR,IAAMC,EAAG,UAAMN,EAAN,UACTO,MAAMD,EAAK,CACTE,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,SAAU,OACVC,SAAU,eAGXC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAS,IACLC,GAAYD,GAAQ,IAApBC,QAENf,EADCe,EACc,UAEA,YAGlBC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,GACdjB,EAAe,cAElB,IAID,qDAAuBD,IChCZ,SAASoB,EAAOC,GAkB7B,OACE,kBAAC,IAAMC,SAAP,KACE,+CACA,2BAAOC,KAAK,OAAOC,GAAG,QAAQC,SAAU,SAACC,GAAD,OApBvB,SAACA,GAAO,IACnBC,EAAcN,EAAdM,UACFC,EAAOF,EAAEG,OAAOC,MAAM,GACtB3B,EAAG,UAAMN,EAAN,qBAA6B8B,EAA7B,UACTvB,MAAMD,EAAK,CACTE,OAAQ,OACRE,KAAMqB,IAELhB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJI,QAAQY,IAAIhB,MAEbE,OAAM,SAAAC,GACLC,QAAQD,MAAMA,MAO+Bc,CAAaN,OCrBnD,SAASO,EAASZ,GAAQ,IAC/BY,EAAaZ,EAAbY,SACR,OAAIA,GAAaA,EAASC,OAInBb,EAAMY,SAASE,KAAI,SAAAC,GAAS,IAAD,EACYA,GAAQ,GAA5CC,EADwB,EACxBA,YAAaC,EADW,EACXA,SAAUC,EADC,EACDA,IAAKC,EADJ,EACIA,IACpC,OACE,kBAAC,IAAMlB,SAAP,CAAgBmB,IAAKD,GACnB,yBAAKE,IAAKH,EAAKI,IAAI,kBACnB,6BAAMN,GACN,gDAAkBC,IAClB,kDAAoBE,IACpB,kBAAC,EAAD,CAAQb,UAAWa,QAXhB,mB,MCUII,ICVXC,EDUWD,EAVf,SAAavB,GAEX,OACE,yBAAKyB,UAAU,OACb,kBAAChD,EAAD,MACA,kBAAC,EAAD,CAAUmC,SAAUZ,EAAMY,UAAY,OECxBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DDXN,IACEN,EAAcrC,KAAK4C,MAAMC,SAASC,eAAe,gBAAgBC,WACjE,MAAMC,GACNrC,QAAQY,IAAIyB,GACZX,EAAc,CACZZ,SAAU,CAAC,CACT,KAAQ,CACR,OACA,SAEA,IAAO,4BACP,YAAe,wBACf,SAAY,iBACZ,IAAO,wIACP,KAAQ,iBACR,OAAU,MACV,SAAY,MACZ,SAAY,iBACZ,IAAO,KAKbwB,IAASC,QACP,kBAAC,EAAQb,GACTQ,SAASC,eAAe,SCmGpB,kBAAmBK,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEd9C,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM8C,c","file":"static/js/main.504c3fb7.chunk.js","sourcesContent":["export const env = process.env.NODE_ENV\nexport const requestUrl = env === 'development' ?\n  'http://localhost:1337/api' :\n  'https://fullstack-printshop.herokuapp.com/api'","import React, { useState, useEffect } from 'react'\nimport { requestUrl } from './constant'\n\nexport default function User() {\n  const [loginStatus, setLoginStatus] = useState('loading')\n\n  useEffect(() => {\n    const url = `${requestUrl}/login`\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: 'zac1',\n        password: '12345678'\n      })\n    })\n      .then(response => response.json())\n      .then(data => {\n        const { success } = data || {}\n        if(success) {\n          setLoginStatus('success')\n        } else {\n          setLoginStatus('error')\n        }\n      })\n      .catch(error => {\n        console.error(error)\n        setLoginStatus('error')\n      })\n  }, [])\n\n\n  return (\n    <h1>{`Log In Status: ${loginStatus}`}</h1>\n  )\n}","import React from 'react'\nimport { requestUrl } from './constant'\n\nexport default function upload(props) {\n  const handleUpload = (e) => {\n    const { productId } = props\n    const file = e.target.files[0]\n    const url = `${requestUrl}/products/${productId}/image`\n    fetch(url, {\n      method: 'POST',\n      body: file\n    })\n      .then(response => response.json())\n      .then(data => {\n        console.log(data)\n      })\n      .catch(error => {\n        console.error(error)\n      })\n  }\n\n  return (\n    <React.Fragment>\n      <span>Change Cover </span>\n      <input type=\"file\" id=\"input\" onChange={(e) => handleUpload(e)} />\n    </React.Fragment>\n  )\n}","import React from 'react'\nimport Upload from './Upload'\n\nexport default function products(props) {\n  const { products } = props\n  if(!products || !products.length) {\n    return 'No product found'\n  }\n\n  return props.products.map(item => {\n    const { description, userName, img, _id } = item || {}\n    return (\n      <React.Fragment key={_id}>\n        <img src={img} alt=\"product cover\" />\n        <div>{description}</div>\n        <h1>{`username: ${userName}`}</h1>\n        <div>{`productid: ${_id}`}</div>\n        <Upload productId={_id} />\n      </React.Fragment>\n    )\n  })\n}","import React from 'react'\nimport User from './User'\nimport Products from './Products'\n\nimport './App.css';\n\nfunction App(props) {\n\n  return (\n    <div className=\"App\">\n      <User />\n      <Products products={props.products || []} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nlet initialData\ntry {\n  initialData = JSON.parse(document.getElementById('initial-data').innerText);\n} catch(err) {\n  console.log(err)\n  initialData = {\n    products: [{\n      \"tags\": [\n      \"test\",\n      \"hello\"\n      ],\n      \"_id\": \"ckd76mdgu0001oxcb0ily5mk1\",\n      \"description\": \"This is test product1\",\n      \"imgThumb\": \"http://test.cn\",\n      \"img\": \"https://images.unsplash.com/photo-1595939152815-39e7ff7dbc76?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=164&q=80\",\n      \"link\": \"http://test.cn\",\n      \"userId\": \"123\",\n      \"userName\": \"zac\",\n      \"userLink\": \"http://test.cn\",\n      \"__v\": 0\n      }]\n  }\n}\n\nReactDOM.hydrate(\n  <App {...initialData} />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"sourceRoot":""}